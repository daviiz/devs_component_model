
package refDemo.PursuerEvader;



import java.awt.Dimension;
import java.awt.Point;

import GenCol.doubleEnt;
import model.modeling.message;
import util.rand;
import view.modeling.ViewableAtomic;
import view.modeling.ViewableComponent;
import view.modeling.ViewableDigraph;

public class vehicleDyn extends  ViewableDigraph{


public vehicleDyn (){
this("vehicleDyn ",vect2DEnt.ZERO);
}

public vehicleDyn (String nm,vect2DEnt initialPos){
super(nm);
addInport("desiredSpeed");
addInport("desiredAccel");
addInport("brake");
addInport("accelerate");
addOutport("position");
addOutport("mileage");
addOutport("outDraw");

////////////////////////////////////
class netAccelerate extends twoDDerivFn{
protected double friction,coef,maxSpeed = 5/*7*/,maxAccel = 20;
protected vect2DEnt accel;

public netAccelerate(String nm,double coef,vect2DEnt initAccel){
                           //friction coef is >=0
super(nm);
addInport("brake");
addInport("accelerate");
addInport("setSpeed");
addInport("setAccel");
addInfluencer("position");
addInfluencer("velocity");
this.coef = coef;
friction = coef;
accel = initAccel;
}


public void deltext(double e,message x){
Continue(e);

 for (int i=0; i< x.getLength();i++){
   if (messageOnPort(x,"brake",i)){
    doubleEnt dv = (doubleEnt)x.getValOnPort("brake",i);
    friction = dv.getv() + coef;
    accel = vect2DEnt.ZERO;
   }
  else if (messageOnPort(x,"accelerate",i)){
    vect2DEnt desiredAccel = (vect2DEnt)x.getValOnPort("accelerate",i);
    accel = desiredAccel.maxLimit(maxAccel);
    friction = coef;
   }
  if (messageOnPort(x,"setSpeed",i)){
    doubleEnt dv = (doubleEnt)x.getValOnPort("setSpeed",i);
    maxSpeed = dv.getv();
   }
  if (messageOnPort(x,"setAccel",i)){
     doubleEnt dv = (doubleEnt)x.getValOnPort("setAccel",i);
     maxAccel = dv.getv();
   }

   }
super.deltext(e,x);
}

rand r = new rand(2);

public vect2DEnt derivative(){
 vect2DEnt pos = valueOf("posiition");
 vect2DEnt vel = valueOf("velocity");
 vect2DEnt frictForce = vel.scalarMult(-friction);
 vect2DEnt acceleration = vel.norm() < r.uniform(0,maxSpeed)?accel:vect2DEnt.ZERO;
return frictForce.add(acceleration);
}


}
///////////////////////////////////////////////
double quantum = 2;//50;//20;//10;//

if (name.endsWith("evader")) quantum = 10;//hard on pursuer
//if (name.endsWith("pursuer")) quantum = 2;//hard on evader

ViewableAtomic x = new twoDint("x",quantum,initialPos);
ViewableAtomic v  = new  twoDint("v",quantum,vect2DEnt.ZERO);

ViewableAtomic a = new netAccelerate("a",.1,new vect2DEnt(10,10));

add(x);
add(v);
add(a);

addCoupling(v,"out",x,"in");
addCoupling(x,"out",a,"inposition");
addCoupling(v,"out",a,"invelocity");

addCoupling(a,"out",v,"in");

addCoupling(this,"brake",a,"brake");
addCoupling(this,"accelerate",a,"accelerate");
addCoupling(this,"desiredSpeed",a,"setSpeed");
addCoupling(this,"desiredAccel",a,"setAccel");
addCoupling (x,"out",this,"position");
addCoupling (x,"outDraw",this,"outDraw");

ViewableAtomic odometer = new sum("odometer",0);//state

add(odometer);

addCoupling(x,"outPos",odometer,"in");
addCoupling(odometer,"out",this,"mileage");



}


    /**
     * Automatically generated by the SimView program.
     * Do not edit this manually, as such changes will get overwritten.
     */
    public void layoutForSimView()
    {
        preferredSize = new Dimension(540, 243);
        ((ViewableComponent)withName("aDeriv")).setPreferredLocation(new Point(-3, 106));
        ((ViewableComponent)withName("v")).setPreferredLocation(new Point(-21, 29));
        ((ViewableComponent)withName("x")).setPreferredLocation(new Point(176, 20));
        ((ViewableComponent)withName("odometer")).setPreferredLocation(new Point(179, 115));
    }
}

